#!/usr/bin/env bash

for_ssh_socket_paths() {
	if [[ -v BASH ]]
	then
		local - # shopt is local to function
		shopt -s nullglob
	elif [[ -v ZSH_NAME ]]
	then
		setopt local_options bashrematch nullglob
	else
		echo "only bash and zsh supported" >&2
		exit 1
	fi
	# see .ssh/config: `ConrolPath ~/.ssh/.control_sockets/%r@%h:%p`
	declare -r \
		ssh_control_path_prefix=~/.ssh/.control_sockets/ \
		ssh_control_path_regex="^${HOME}/\.ssh/\.control_sockets/([^@]+@[^:]+:[[:digit:]]+)$"
	local socket_path ret=1
	for socket_path in "${ssh_control_path_prefix}"*
	do
		[[ "${socket_path}" =~ ${ssh_control_path_regex} ]] || continue
		if [[ -S "${socket_path}" ]]
		then
			"$@" "${BASH_REMATCH[1]}" "${socket_path}" && ret=0
		else
			echo "not a socket: ${socket_path}" >&2
		fi
	done
	return ${ret}
}

control_ssh_master_process() {
	[[ -z "$2" || "$3" =~ $2 ]] || return
	echo -n "$3: "
	ssh -S "$4" -O "$1" ""
}

print_ssh_master_process() {
	[[ -z "$1" || "$2" =~ $1 ]] || return
	echo "$2 ($3)"
}

# “check” (check that the master process is running)
# “forward” (request forwardings without command execution)
# “cancel” (cancel forwardings)
# “exit” (request the master to exit)
# “stop” (request the master to stop accepting further multiplexing requests)
declare -r prog_name=$(basename "$0")
declare -ra cmds=("check [<pattern>]" "forward <pattern> [<forward_option> ...]" "cancel <pattern> [<forward_option> ...]" "exit [<pattern>]" "stop [<pattern>]" "list [<pattern>]")
usage() {
	local cmd
	for cmd in "${cmds[@]}"
	do
		printf "usage: ${prog_name} %s\n" "${cmd}" >&2
	done
	exit 1
}
(($#)) || usage
case "$1" in
	check|exit|stop)
		(($# <= 2)) || usage
		for_ssh_socket_paths control_ssh_master_process "$1" "$2" ||
		echo "no active ssh master processes found" >& 2
		;;
	forward|cancel)
		(($# >= 2)) || usage
		matches=$(for_ssh_socket_paths print_ssh_master_process "$2") || {
			echo "no matches" >&2
			exit 1
		}
		if [[ $(wc -l <<< "${matches}") -ne 1 ]]
		then
			names=($(sed "s;^\([^ ]*\).*$;\1;g" <<< "${matches}"))
			echo "possible matches: ${names[*]}" >&2
			exit 1
		fi
		ctl_cmd=$1
		shift 2
		file=$(sed "s;^[^ ]* (\(.*\))$;\1;g" <<< "${matches}")
		ssh -S "${file}" -O "${ctl_cmd}" "$@" ""
		;;
	list)
		(($# <= 2)) || usage
		for_ssh_socket_paths print_ssh_master_process "$2"
		;;
	*)
		usage
		;;
esac
